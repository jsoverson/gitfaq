<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on GitFAQ.org</title><link>https://gitfaq.org/posts/</link><description>Recent content in Posts on GitFAQ.org</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Except where otherwise noted, content on this site is licensed under the [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0.html) license.</copyright><atom:link href="https://gitfaq.org/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>How do I add only a portion of a file?</title><link>https://gitfaq.org/1/01/how-do-i-add-only-a-portion-of-a-file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/how-do-i-add-only-a-portion-of-a-file/</guid><description>$ git add --patch &amp;lt;file&amp;gt; This brings up an interactive interface that moves through each individual change to a file, allowing you to only stage the changes that you want.
$ git add --patch package.json diff --git a/package.json b/package.json index 7a558a3..e03ce3f 100644 --- a/package.json +++ b/package.json @@ -2,7 +2,6 @@ &amp;#34;name&amp;#34;: &amp;#34;package&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;0.</description></item><item><title>How do I change my last commit message?</title><link>https://gitfaq.org/1/01/how-do-i-change-my-last-commit-message/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/how-do-i-change-my-last-commit-message/</guid><description>$ git commit --amend --only Or, without staged changes:
$ git commit --amend --amend without other options combines the currently staged changes with the last commit and then opens an editor to update the commit message. If you have staged changes, they will be added.
To update the last message even if there are staged changes (git status reports files under Changes to be committed) then you can use the -o (or --only) option to indicate you want to amend the last commit but only use the files that were previously committed.</description></item><item><title>How do I change the contents of a commit I have not pushed?</title><link>https://gitfaq.org/1/01/how-do-i-change-the-contents-of-a-commit-i-have-not-pushed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/how-do-i-change-the-contents-of-a-commit-i-have-not-pushed/</guid><description>git commit --amend &amp;lt;files&amp;gt; or
git commit --amend --all If the commit message does not need to be changed, add --no-edit eg
git commit --amend --all --no-edit</description></item><item><title>How do I commit a file?</title><link>https://gitfaq.org/1/01/how-do-i-commit-a-file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/how-do-i-commit-a-file/</guid><description>git add file.js # stage the file git commit # commit the file</description></item><item><title>How do I compare branches?</title><link>https://gitfaq.org/1/01/how-do-i-compare-branches/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/how-do-i-compare-branches/</guid><description>Find commits on remote master branch which are not on our local master branch:
git cherry -v origin/master master Find commits on local master branch which are not on our local feature branch:
git cherry -v master feature Find commits added since the 1.0.0 tag:
git cherry -v v1.0.0 master</description></item><item><title>How do I completely reset my local repository?</title><link>https://gitfaq.org/1/01/how-do-i-completely-reset-my-local-repository/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/how-do-i-completely-reset-my-local-repository/</guid><description>git reset git checkout . git clean -fdx</description></item><item><title>How do I create a branch?</title><link>https://gitfaq.org/1/01/how-do-i-create-a-branch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/how-do-i-create-a-branch/</guid><description>git branch &amp;lt;branch&amp;gt; # just creates a branch off the current sha git checkout &amp;lt;branch&amp;gt; # actually moves to the branch This can be simplified to:
git checkout -b &amp;lt;branch&amp;gt; # branches and moves to the branch in one command</description></item><item><title>How do I create a new git repository?</title><link>https://gitfaq.org/1/01/how-do-i-create-a-new-git-repository/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/how-do-i-create-a-new-git-repository/</guid><description>git init git add . git commit -m ‘initial commit’ git remote add origin &amp;lt;destination&amp;gt; git push -u origin master</description></item><item><title>How do I delete a branch?</title><link>https://gitfaq.org/1/01/how-do-i-delete-a-branch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/how-do-i-delete-a-branch/</guid><description>Delete a local branch feature:
git branch -d feature This will fail if the branch is not merged. To delete the branch regardless:
git branch -D feature To delete a remote branch feature on remote origin (warning: There is no confirmation!):
git push origin :feature Note: git-branch documentation lists documentation for the option -r which works on remote tracking branches, not branches on the remote; git branch -D -r origin/feature will delete the remote tracking branch origin/feature, not the branch feature on remote origin.</description></item><item><title>How do I get a list of files that have changed since a commit?</title><link>https://gitfaq.org/1/01/how-do-i-get-a-list-of-files-that-have-changed-since-a-commit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/how-do-i-get-a-list-of-files-that-have-changed-since-a-commit/</guid><description>After getting the appropriate hash from a command like git log
git diff --name-only cda409f...</description></item><item><title>How do I ignore a file pattern?</title><link>https://gitfaq.org/1/01/how-do-i-ignore-a-file-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/how-do-i-ignore-a-file-pattern/</guid><description>git ignore &amp;#39;*.swp&amp;#39; If you haven&amp;rsquo;t ignored anything yet, this creates a .gitignore file which you probably want to add and track.
git add .gitignore git commit -m &amp;#39;added .gitignore&amp;#39;</description></item><item><title>How do I push my changes?</title><link>https://gitfaq.org/1/01/how-do-i-push-my-changes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/how-do-i-push-my-changes/</guid><description>git push git push origin branch-name</description></item><item><title>How do I remove all untracked files?</title><link>https://gitfaq.org/1/01/how-do-i-remove-all-untracked-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/how-do-i-remove-all-untracked-files/</guid><description>git clean -fd</description></item><item><title>How do I revert all uncommitted changes?</title><link>https://gitfaq.org/1/01/how-do-i-revert-all-uncommitted-changes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/how-do-i-revert-all-uncommitted-changes/</guid><description>git checkout . # reset all tracked files git checkout file.txt # reset file.txt git checkout somedir/ # reset all files in somedir/ git reset --hard HEAD</description></item><item><title>How do I squash commits?</title><link>https://gitfaq.org/1/01/how-do-i-squash-commits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/how-do-i-squash-commits/</guid><description>There are multiple ways of squashing commits but the most recommended and straight forward is to use an interactive rebase, eg
git rebase -i HEAD~4 # interactively rebase from 3 commits ago This command will bring up your editor with some helpful documentation and list of those commits and messages. The commits are listed in order with the oldest commit at the top and the latest commit at the bottom.</description></item><item><title>How do I undo a commit?</title><link>https://gitfaq.org/1/01/how-do-i-undo-a-commit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/how-do-i-undo-a-commit/</guid><description>Do you want to undo the commit and never see the changes ever again?
git reset --hard HEAD~1 Do you want to keep your changes and just undo the actual act of committing?
git reset HEAD~1</description></item><item><title>How do I undo git add?</title><link>https://gitfaq.org/1/01/how-do-i-undo-git-add/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/how-do-i-undo-git-add/</guid><description>git reset or
git reset file.txt git add simply stages changes to be committed. To undo that action, all that&amp;rsquo;s needed is to git reset the file or list of files.
To undo a commit, see [How do I undo a commit?](http://gitfaq.org/#How do I undo a commit?)</description></item><item><title>How do I update my repository?</title><link>https://gitfaq.org/1/01/how-do-i-update-my-repository/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/how-do-i-update-my-repository/</guid><description>git pull [remote] [branch] To update using rebase :
git pull --rebase [remote] [branch] This performs the same as above, but using rebase instead of merge.
(See also What is the difference between fetch and pull for more details)</description></item><item><title>What does "Changing History" mean?</title><link>https://gitfaq.org/1/01/what-does-changing-history-mean/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/what-does-changing-history-mean/</guid><description>In git, each commit is tagged with a unique SHA-1 hash. These are critical when resolving differences between sources that have diverged. This sequence of SHAs is referred to as the &amp;ldquo;history&amp;rdquo; and &amp;ldquo;changing history&amp;rdquo; is regenerating those hashes via any number of legitimate means.
A modified history makes it very difficult to resolve differences between two repositories because, from git&amp;rsquo;s perspective, the SHAs have changed and commits that should refer to the same changes now look to be two different changes at different times.</description></item><item><title>What if I forgot to add a file in my last commit?</title><link>https://gitfaq.org/1/01/what-if-i-forgot-to-add-a-file-in-my-last-commit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/what-if-i-forgot-to-add-a-file-in-my-last-commit/</guid><description>git add file.js # the file that needed to be included git commit --amend # amend the commit done before step 1 with the added file This will add the file to the previous commit and replace it with a new commit.
This can be simplified into one command:
git commit --amend file.</description></item><item><title>What is "origin"?</title><link>https://gitfaq.org/1/01/what-is-origin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/what-is-origin/</guid><description>Origin is the default name for the remote server. &amp;ldquo;Remotes&amp;rdquo; can be named anything, you can see the names of all your remotes with the command remote
$ git remote -v origin git@github.com:jsoverson/gitfaq.git (fetch) origin git@github.com:jsoverson/gitfaq.git (push)</description></item><item><title>What is a "detached head"?</title><link>https://gitfaq.org/1/01/what-is-a-detached-head/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/what-is-a-detached-head/</guid><description>You are in &amp;#39;detached HEAD&amp;#39; state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by performing another checkout. This is not an error message and is nothing to be worried about. This is simply a notice that you are not attached to an actual branch.</description></item><item><title>What is a "remote"?</title><link>https://gitfaq.org/1/01/what-is-a-remote/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/what-is-a-remote/</guid><description>The term &amp;ldquo;remote&amp;rdquo; is any remote destination that you may want to push or pull from. This is often a git repository hosted on a git server like those run by Github.
You can have multiple remotes.
You can view the remotes you have set with git remote and git remote -v gives you more important information.</description></item><item><title>What is difference between master &amp; HEAD?</title><link>https://gitfaq.org/1/01/what-is-difference-between-master-head/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/what-is-difference-between-master-head/</guid><description>master is the common name for the default branch. It doesn&amp;rsquo;t need to exist, but it often does.
HEAD can be thought of as a variable pointing to a specific commit. It can change and isn&amp;rsquo;t related to a branch.
Issuing new commits changes HEAD, checking anything out changes HEAD.</description></item><item><title>What is local history/shared history?</title><link>https://gitfaq.org/1/01/what-is-local-history/shared-history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/what-is-local-history/shared-history/</guid><description>&amp;ldquo;Remote history&amp;rdquo; or &amp;ldquo;Shared History&amp;rdquo; is used to refer to history that is shared with others. &amp;ldquo;Local history&amp;rdquo; is used to refer to changes that have never been shared.
For the following commit history, &amp;ldquo;Shared History&amp;quot;and &amp;ldquo;Local History&amp;rdquo; boundaries are shown,
A-B-C-D-E origin/master A-B-C-D-E-F-G-H-I origin/feature1 A-B-C-D-E-F-G-H-I-J-K-J feature1 (local) | | | | | | | | | | +-+-+ | | | | | | | +--+--+ Local History | | | +---+---+ Shared History (branch) | Shared History (master)</description></item><item><title>What is rebasing?</title><link>https://gitfaq.org/1/01/what-is-rebasing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/what-is-rebasing/</guid><description>Rebasing is establishing a new base for a series of commits.
In the example below, the branch feature deviated at commit B, while the master branch moved along in parallel.
A-B-C-D-E master \ X-Y-Z feature You can rebase with the rebase command. For example, to rebase the feature branch on master:</description></item><item><title>What is squashing?</title><link>https://gitfaq.org/1/01/what-is-squashing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/what-is-squashing/</guid><description>Squashing is the act of turning multiple git commits into fewer. There are many reasons you might want to do this but the most straightforward is to simply keep the commit history cleaner and filled with high value changes.
Consider the following set of commits
f53d15b fixed edge case with IE5 930c0e5 increased code coverage fa7c471 fixed lint errors fb57c85 added feature Foo In a local repository that level of detail may be useful; at some point a regression may have been introduced while fixing lint errors and you would be able to revert to a previous commit to do some testing.</description></item><item><title>What is the difference between fetch and pull?</title><link>https://gitfaq.org/1/01/what-is-the-difference-between-fetch-and-pull/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gitfaq.org/1/01/what-is-the-difference-between-fetch-and-pull/</guid><description>git pull [remote] [branch] is the same as
git fetch [remote] [branch] git merge [remote][/branch] git pull --rebase [remote] [branch] is the same as
git fetch [remote] [branch] git rebase [remote][/branch]</description></item></channel></rss>